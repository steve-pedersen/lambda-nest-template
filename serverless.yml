service: lambda-nest-template

package:
  individually: true

custom:
  stage: ${opt:stage, self:provider.stage}
  deploymentBucket:
    prod: 's37-prod-lambda'
    intval: 's37-val-lambda'
    extval: 's37-val-lambda'
    dev1: 's37-dev-lambda'
    dev2: 's37-dev-lambda'
    stage: 's37-dev-lambda'
    prod-eu-de: 's37-prod-lambda-eu'
    intval-eu-de: 's37-val-lambda-eu'
    extval-eu-de: 's37-val-lambda-eu'
    dev1-eu-de: 's37-dev-lambda-eu'
    dev2-eu-de: 's37-dev-lambda-eu'
    stage-eu-de: 's37-dev-lambda-eu'
  profiles:
    dev1: 'default'
    dev2: 'default'
    stage: 'default'
    prod-eu-de: 'production'
    intval-eu-de: 'production'
    extval-eu-de: 'production'
    dev1-eu-de: 'default'
    dev2-eu-de: 'default'
    stage-eu-de: 'default'
  regions:
    prod: 'us-west-2'
    intval: 'us-west-2'
    extval: 'us-west-2'
    dev1: 'us-west-2'
    dev2: 'us-west-2'
    stage: 'us-west-2'
    prod-eu-de: 'eu-central-1'
    intval-eu-de: 'eu-central-1'
    extval-eu-de: 'eu-central-1'
    dev1-eu-de: 'eu-central-1'
    dev2-eu-de: 'eu-central-1'
    stage-eu-de: 'eu-central-1'
  esbuild:
    bundle: true
    minify: false
    sourcemap: linked
    keepNames: true
  newRelic:
    accountId: '${ssm:/newrelic-infra/lambda/license-id}'
    apiKey: '${ssm:/newrelic-infra/lambda/license-key}'
    enableIntegration: true

provider:
  name: aws
  profile: ${self:custom.profiles.${opt:stage, self:provider.stage}}
  deploymentBucket: ${self:custom.deploymentBucket.${opt:stage, self:provider.stage}}
  runtime: nodejs16.x
  region: ${self:custom.regions.${opt:stage, self:provider.stage}, 'eu-central-1'}
  stage: ${opt:stage, 'dev1'}
  deploymentPrefix: serverless
  timeout: 30
  versionFunctions: false
  tracing:
    lambda: true
  memorySize: 512
  environment:
    NODE_ENV: ${self:provider.stage}
    SHA: ${opt:SHA, 'unknown'}
    REGION: ${self:provider.region}
    SERVICE_REGION: ${self:custom.serviceRegions.${opt:stage, self:provider.stage}, 'us-w2'}
  vpc:
    securityGroupIds: ${ssm:/terraform-output/${self:provider.stage}/vpc/security-groups/default/id/value}
    subnetIds: ${ssm:/terraform-output/${self:provider.stage}/vpc/subnets/private/ids/value}

plugins:
  - serverless-esbuild
  - serverless-offline
  - serverless-newrelic-lambda-layers

layers:
  dependencies:
    path: dependency_layer
    name: ${opt:stage, self:provider.stage}-${self:service}
    description: npm dependencies for the lambda-nest-template app for a stage
    compatibleRuntimes:
      - nodejs16.x

functions:
  api:
    handler: dist/lambda.handler
    events:
      - http:
          method: any
          path: /{proxy+}

resources:
  - ${file(./resources/roles.yml)}
